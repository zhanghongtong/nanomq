name: Build packages

on:
  push:
  pull_request:
  release:
    types:
    - published

jobs:
  build_packages:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        system:
        - [amd64, gcc, g++]
        - [arm64, aarch64-linux-gnu-gcc, aarch64-linux-gnu-g++]
        # - [arm32hf, arm-linux-gnueabihf-gcc, arm-linux-gnueabihf-g++]
        # - [arm32el, arm-linux-gnueabi-gcc, arm-linux-gnueabi-g++]

    steps:
    - name: install lib
      run: |
        sudo apt update
        sudo apt install -y cmake ninja-build rpm checkinstall
        sudo apt install -y g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
    - uses: actions/checkout@v1
    - name: build nanomq
      run: |
        set -eu
        mkdir -p build
        cd build
        cmake -DCMAKE_C_COMPILER=${{ matrix.system[1] }} -DCMAKE_CXX_COMPILER=${{ matrix.system[2] }} ..
        make
    - name: build deb
      run: |
        set -eu
        cd build
        mkdir -p _packages
        sudo checkinstall --backup=no --install=no --type=debian --arch=${{ matrix.system[0] }}  --pkgname=nanomq --pkgversion=$(git describe --abbrev=0 --tags) --pkggroup=EMQX --maintainer=EMQX --provides=EMQX --pakdir _packages --recommends=1 --suggests=1 -y
        pkg_name="nanomq-$(git describe --abbrev=0 --tags)-linux-${{ matrix.system[0] }}.deb"
        sudo mv _packages/nanomq_$(git describe --abbrev=0 --tags)-1_${{ matrix.system[0] }}.deb _packages/$pkg_name
        cd _packages; echo $(sha256sum $pkg_name | awk '{print $1}') > $pkg_name.sha256
    - name: build rpm
      shell: bash
      run: |
        set -eu
        cd build
        mkdir -p _packages
        sudo mkdir -p /root/rpmbuild/SOURCES
        sudo mkdir -p /root/rpmbuild/BUILD
        sudo mkdir -p /root/rpmbuild/BUILDROOT
        sudo checkinstall --backup=no --install=no --type=rpm --arch=${{ matrix.system[0] }} --pkgname=nanomq --pkgversion=$(git describe --abbrev=0 --tags) --pkggroup=EMQX --maintainer=EMQX --provides=EMQX --pakdir _packages --recommends=1 --suggests=1 -y
        pkg_name="nanomq-$(git describe --abbrev=0 --tags)-linux-${{ matrix.system[0] }}.rpm"
        sudo mv _packages/nanomq-$(git describe --abbrev=0 --tags)-1.${{ matrix.system[0] }}.rpm _packages/$pkg_name
        cd _packages; echo $(sha256sum $pkg_name | awk '{print $1}') > $pkg_name.sha256
    - uses: actions/upload-artifact@v2
      with:
        name: packages
        path: "build/_packages/*"
    - uses: Rory-Z/upload-release-asset@v1
      if: github.event_name == 'release'
      with:
        owner: ${{ github.repository_owner }}
        repo: nanomq
        token: ${{ github.token }}
        path: "build/_packages/nanomq*"
        ref: ${{ github.ref }}
    - name: upload to aws s3
      if: github.event_name == 'release'
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region us-west-2
        aws s3 cp --recursive build/_packages s3://packages.emqx/nanomq/$(git describe --abbrev=0 --tags)

  build_docker:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        suffix:
        - fat
        - slim
        - alpine

    steps:
    - uses: actions/checkout@v1
    - name: build docker
      if: matrix.suffix == 'fat'
      run: docker build -t nanomq/nanomq:$(git describe --tags --always) -f deploy/docker/Dockerfile .
    - name: build docker
      if: matrix.suffix != 'fat'
      run: docker build -t nanomq/nanomq:$(git describe --tags --always)-${{ matrix.suffix }} -f deploy/docker/Dockerfile-${{ matrix.suffix }} .
    - name: test docker
      run: |
        set -e -x -u
        sudo apt update && sudo apt install -y mosquitto-clients
        ip_address=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker run -d $(docker images nanomq/nanomq -q | head -1)))
        sleep 5
        mosquitto_pub -h $ip_address -t 'topic/A' -m 'test'
        docker rm -f $(docker ps -a -q)
    - name: update docker
      if: github.event_name == 'release'
      run: |
        sudo apt-get remove docker docker-engine docker.io containerd runc
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io
    - name: prepare docker
      if: github.event_name == 'release'
      run: |
        mkdir -p $HOME/.docker
        echo '{ "experimental": "enabled" }' | tee $HOME/.docker/config.json
        echo '{ "experimental": true, "storage-driver": "overlay2", "max-concurrent-downloads": 50, "max-concurrent-uploads": 50, "graph": "/mnt/docker" }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        docker version
        docker buildx create --use --name mybuild
        docker run --rm --privileged tonistiigi/binfmt --install all
    - name: cross build docker images
      if: (matrix.suffix == 'fat') && (github.event_name == 'release')
      run: |
        set -e -u -x
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
        docker buildx build --no-cache \
        --platform=linux/amd64,linux/arm64,linux/arm/v7,linux/s390x,linux/ppc64le \
        -t nanomq/nanomq:$(git describe --tags --always) \
        -f deploy/docker/Dockerfile . \
        --push
    - name: cross build docker images
      if: (matrix.suffix != 'fat') && (github.event_name == 'release')
      run: |
        set -e -u -x
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
        docker buildx build --no-cache \
        --platform=linux/amd64,linux/arm64,linux/arm/v7,linux/s390x,linux/ppc64le \
        -t nanomq/nanomq:$(git describe --tags --always)-${{ matrix.suffix }} \
        -f deploy/docker/Dockerfile-${{ matrix.suffix }} . \
        --push
